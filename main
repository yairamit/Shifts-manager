import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

const ShiftScheduler = () => {
  const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת'];
  const shifts = [
    { time: '01:00-07:00', label: 'משמרת לילה' },
    { time: '07:00-13:00', label: 'משמרת בוקר' },
    { time: '13:00-19:00', label: 'משמרת צהריים' },
    { time: '19:00-01:00', label: 'משמרת ערב' }
  ];

  const [schedule, setSchedule] = useState({});
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedCells, setSelectedCells] = useState([]);

  const getColorClass = (state) => {
    switch(state) {
      case 1:
        return 'bg-green-500';
      case 2:
        return 'bg-yellow-500';
      case 3:
        return 'bg-red-500';
      case 4:
        return 'bg-purple-500';
      default:
        return 'bg-slate-50';
    }
  };

  const handleCellClick = (day, shift) => {
    const key = `${day}-${shift}`;
    
    if (selectionMode) {
      if (selectedCells.includes(key)) {
        setSelectedCells(prev => prev.filter(cell => cell !== key));
      } else {
        setSelectedCells(prev => [...prev, key]);
      }
      return;
    }

    setSchedule(prev => {
      const currentState = prev[key] || 0;
      let nextState = (currentState % 3) + 1;
      
      const redCellsCount = Object.values(prev).filter(state => state === 3).length;
      if (nextState === 3 && redCellsCount >= 7 && currentState !== 3) {
        nextState = 1;
      }

      return {
        ...prev,
        [key]: nextState
      };
    });
  };

  const handleSequenceSubmit = () => {
    if (selectedCells.length < 2) {
      alert('יש לבחור לפחות 2 משמרות רצופות');
      return;
    }

    setSchedule(prev => {
      const newSchedule = { ...prev };
      selectedCells.forEach(key => {
        newSchedule[key] = 4; // סימון סגול לרצף
      });
      return newSchedule;
    });

    setSelectedCells([]);
    setSelectionMode(false);
  };

  const countRedCells = () => {
    return Object.values(schedule).filter(state => state === 3).length;
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader className="text-right">
        <CardTitle className="text-2xl">מערכת משמרות שבועית</CardTitle>
        <div className="flex gap-2 justify-end text-sm flex-wrap">
          <button 
            className={`px-3 py-1 rounded ${selectionMode ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
            onClick={() => {
              setSelectionMode(!selectionMode);
              if (!selectionMode) {
                setSelectedCells([]);
              }
            }}
          >
            {selectionMode ? 'ביטול בחירת רצף' : 'בחירת רצף משמרות'}
          </button>
          {selectionMode && (
            <button 
              className="px-3 py-1 rounded bg-purple-500 text-white"
              onClick={handleSequenceSubmit}
            >
              שמור רצף
            </button>
          )}
          <div className="flex items-center gap-1">
            <div className="w-4 h-4 bg-green-500 rounded"></div>
            <span>רוצה</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-4 h-4 bg-yellow-500 rounded"></div>
            <span>יכול</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-4 h-4 bg-red-500 rounded"></div>
            <span>לא יכול ({countRedCells()}/7)</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-4 h-4 bg-purple-500 rounded"></div>
            <span>רצף מועדף</span>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr>
                <th className="p-2 border"></th>
                {days.map(day => (
                  <th key={day} className="p-2 border text-right">
                    {day}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {shifts.map(shift => (
                <tr key={shift.time}>
                  <td className="p-2 border text-right whitespace-nowrap">
                    {shift.time}
                    <div className="text-xs text-gray-500">{shift.label}</div>
                  </td>
                  {days.map(day => {
                    const key = `${day}-${shift.time}`;
                    const currentState = schedule[key] || 0;
                    const isSelected = selectedCells.includes(key);
                    return (
                      <td key={day} className="p-1 border">
                        <button 
                          className={`w-full h-12 rounded transition-colors duration-200 hover:opacity-90
                            ${isSelected ? 'ring-2 ring-blue-500' : ''}
                            ${getColorClass(currentState)}`}
                          onClick={() => handleCellClick(day, shift.time)}
                        >
                          &nbsp;
                        </button>
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </CardContent>
    </Card>
  );
};

export default ShiftScheduler;
